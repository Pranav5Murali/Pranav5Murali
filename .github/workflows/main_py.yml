name: Deploy and Run Python Script on Ubuntu VM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy and Execute Python Script on Ubuntu VM
    runs-on: self-hosted
    environment: ubuntu1
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Copy and Execute Script on Remote Server (Python3)
        shell: python
        env:
          USERNAME: "pranav"
          HOST: "192.168.1.100"
          PASSWORD: ${{ secrets.ubuntu1 }}
          TARGET_DIR: "/home/pranav/git_target"
          LOCAL_SCRIPT: "./view_files.py"
          REMOTE_SCRIPT: "/home/pranav/git_target/view_files.py"
        run: |
          import os
          import subprocess

          # Fetch environment variables
          username = os.getenv("USERNAME")
          host = os.getenv("HOST")
          password = os.getenv("PASSWORD")
          target_dir = os.getenv("TARGET_DIR")
          local_script = os.getenv("LOCAL_SCRIPT")
          remote_script = os.getenv("REMOTE_SCRIPT")

          # Step 1: Copy the Python script to the remote server using scp
          print(f"Copying Python script to {host}...")
          copy_cmd = (
              f'sshpass -p "{password}" scp -o StrictHostKeyChecking=no '
              f'{local_script} {username}@{host}:{target_dir}/'
          )
          subprocess.run(copy_cmd, shell=True, check=True)

          # Step 2: Check if python3 is available on the remote server
          print("Checking if python3 is installed on remote server...")
          check_python_cmd = (
              f'sshpass -p "{password}" ssh -o StrictHostKeyChecking=no '
              f'{username}@{host} "which python3"'
          )
          check_result = subprocess.run(check_python_cmd, shell=True, capture_output=True, text=True)

          if check_result.returncode != 0:
              print("Error: python3 not found on the remote server.")
              exit(1)
          else:
              print(f"Python3 found: {check_result.stdout.strip()}")

          # Step 3: Execute the Python script on the remote server using full path to python3
          print(f"Executing Python script on {host} using python3...")
          exec_cmd = (
              f'sshpass -p "{password}" ssh -o StrictHostKeyChecking=no '
              f'{username}@{host} "/usr/bin/python3 {remote_script}"'
          )
          result = subprocess.run(exec_cmd, shell=True, capture_output=True, text=True)

          # Step 4: Check the result and handle errors
          if result.returncode != 0:
              print(f"Error: {result.stderr}")
              exit(1)
          else:
              print(f"Success: {result.stdout}")
